#!/bin/bash -e


# git releasy new
# git releasy tag


#--

RELEASE_BRANCH_PREFIX="release/"
MASTER_VERSION_POSTFIX="-SNAPSHOT"

VERSION_PROPERTIES=version.properties

## e.g. 2.7
RELEASE_BRANCH_REGEXP='^'$RELEASE_BRANCH_PREFIX'[0-9]+\.[0-9]+$'
## e.g. 2.7.5
VERSION_REGEXP='^[0-9]+(\.[0-9]+){2}$'

CURR_VERSION=
NEXT_VERSION=
NEXT_BRANCH=

#--

main() {
   set_version_properties

   require_master_or_release_branch

   set_curr_version
   set_next_version

   ask_next_version NEXT_VERSION "$CURR_VERSION" "$NEXT_VERSION"

   ## if on master create a new release branch
   if on_master_branch
   then
      git fetch --quiet
      assert_git_clean_and_up_to_date

      git checkout -b ${RELEASE_BRANCH_PREFIX}${NEXT_BRANCH}

      update_version $CURR_VERSION
      git add -u
      git commit -m "$CURR_VERSION"

      git checkout master
      update_version $NEXT_VERSION $MASTER_VERSION_POSTFIX
      git add -u
      git commit -m "${NEXT_VERSION}${MASTER_VERSION_POSTFIX}"

   ## if on release branch create a new patch version
   elif on_release_branch
   then

      git fetch --quiet
      assert_git_clean_and_up_to_date

      update_version $NEXT_VERSION
      git add -u
      git commit -m "$NEXT_VERSION"
   fi
}

#
require_master_or_release_branch() {
   if ! on_master_branch && ! on_release_branch
   then
      die "Current branch must be master or release/x.y"
   fi
}

#
die() {
   echo "${0##*/}: $@"" -- exit." >&2
   exit 1;
}

#
git_toplevel() {
   local _outvar="$1"
   local _toplevel=$(git rev-parse --show-toplevel 2> /dev/null)
   if [[ -z $_toplevel ]] || [[ ! -d $_toplevel ]]
   then
      die "Git toplevel not found. Not a git repository (or any of the parent directories)"
   fi

   eval "$_outvar=\$_toplevel"
}

#
git_current_upstream_branch() {
   git rev-parse --abbrev-ref HEAD@{upstream}
}

#
git_current_branch() {
   git symbolic-ref --short --quiet HEAD
}

#
on_master_branch() {
   [[ $(git_current_branch) == "master" ]]
}

#
on_release_branch() {
   [[ $(git_current_branch) =~ $RELEASE_BRANCH_REGEXP ]]
}

#
is_git_clean_work_tree () {
   git rev-parse --verify HEAD >/dev/null || return 1
   git update-index -q --ignore-submodules --refresh
   git diff-files --quiet --ignore-submodules || return 1
   git diff-index --cached --quiet --ignore-submodules HEAD -- || return 1
}

#
is_git_upstream_branch_configured() {
   git rev-parse --verify HEAD@{upstream} > /dev/null 2>&1
}

#
is_git_upstream_up_to_date() {
   is_git_upstream_branch_configured || return 0

   git rev-list HEAD@{upstream}..HEAD | grep -q .
   [[ $? != 1 ]] && return 1

   git rev-list HEAD..HEAD@{upstream} | grep -q .
   [[ $? != 1 ]] && return 1

   return 0
}

#
assert_git_clean_and_up_to_date() {
   if ! is_git_clean_work_tree
   then
      die "Found unstaged or uncommitted changes"
   fi

   if ! is_git_upstream_up_to_date
   then
      die "Your branch and '$(git_current_upstream_branch)' have diverged"
   fi
}

#
is_valid_version() {
   [[ $1 =~ $VERSION_REGEXP ]]
}

#
assert_valid_version() {
   local version="$1"

   if ! is_valid_version "$version"
   then
      die "not valid version: $version"
   fi
}

#
set_curr_version() {
   local version

   require_version_properties

   . $VERSION_PROPERTIES
   assert_valid_version $version

   CURR_VERSION=$version
}

#
set_next_version() {
   local split major minor patch

   split=(${CURR_VERSION//\./ })
   major=${split[0]}
   minor=${split[1]}
   patch=${split[2]}

   if on_master_branch
   then
      # e.g. 2.7
      NEXT_BRANCH="$major.$minor"

      # e.g. 2.7.0 -> 2.8.0
      NEXT_VERSION="$major.$((minor+1)).0"
   else
      # e.g. 2.7.3 -> 2.7.4
      NEXT_VERSION="$major.$minor.$((patch+1))"
   fi
}

#
function ask_next_version {
   local _outvar="$1"
   local read_version _next_version

   if on_master_branch
   then
      echo "Create new release branch: '${RELEASE_BRANCH_PREFIX}${NEXT_BRANCH}'"
      read -e -p "and prepare '$(git_current_branch)' for future version: [$NEXT_VERSION] ?" read_version
   else
      echo "Current version on '$(git_current_branch)' is: $CURR_VERSION"
      read -e -p "Enter next patch version [$NEXT_VERSION] ?" read_version
   fi
   _next_version=${read_version:=$NEXT_VERSION}

   assert_valid_version $_next_version

   eval "$_outvar=\$_next_version"
}

#
set_version_properties() {
   local toplevel

   git_toplevel toplevel
   VERSION_PROPERTIES=$toplevel/$VERSION_PROPERTIES
}

#
require_version_properties() {
   local version init_version read_version

   if [[ ! -f $VERSION_PROPERTIES ]]
   then
      init_version=1.0.0
      read -e -p "${VERSION_PROPERTIES##*/} file not found, create it with version [$init_version] ?" read_version
      version=${read_version:=$init_version}
      assert_valid_version $version

      update_version_properties $version
   fi
}

#
update_version_properties() {
   local version="$1"
   printf "# git-releasy generated file\nversion=%s\n" $version > $VERSION_PROPERTIES
}

#
update_version_pom() {
   local version="$1"
   local postfix="$2"
   mvn -q versions:set -DgenerateBackupPoms=false -DnewVersion=${version}${postfix} versions:commit > /dev/null
}

#
update_version() {
   local version="$1"
   local postfix="$2"

   update_version_properties $version
   update_version_pom $version $postfix
}

main


