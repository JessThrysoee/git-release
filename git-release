#!/bin/bash -e

#
usage() {
   cat <<EOF
usage: git release branch
   or: git release tag [-f|--force] [-m|--message <msg>]
   or: git release set-version <version>

    Simple release oriented workflow.

EOF
}

#
init() {
   get_config RELEASE_BRANCH_PREFIX "release-branch-prefix" "release/"

   get_config MASTER_VERSION_POSTFIX "master_version_postfix" "-SNAPSHOT"
   get_config RELEASE_VERSION_POSTFIX "release_version_postfix" ""

   # If an executable is found at $GIT_RELEASE_HOOK, then it is called after git-release changes
   # the version variable in $GIT_RELEASE_PROPERTIES but before the new version is commited.
   # The arguments to the hook are the version and a version_postfix (e.g. $MASTER_VERSION_POSTFIX).
   #
   # Here is an example hook that updates a branch with the Versions Maven Plugin:
   #
   #    #!/bin/bash
   #
   #    version="$1"
   #    postfix="$2"
   #    mvn -q versions:set -DgenerateBackupPoms=false -DnewVersion=${version}${postfix} versions:commit > /dev/null
   #
   get_config GIT_RELEASE_HOOK "git_release_hook" "./git-release-hook"
   get_config GIT_RELEASE_PROPERTIES "git_release_properties" "git-release.properties"

   ## major.minor e.g. 2.7
   RELEASE_BRANCH_REGEXP='^'$RELEASE_BRANCH_PREFIX'[0-9]+\.[0-9]+$'
   ##  major.minor.patch e.g. 2.7.5
   VERSION_REGEXP='^[0-9]+(\.[0-9]+){2}$'

   CURR_VERSION=
   NEXT_VERSION=
   NEXT_BRANCH=
}

#
get_config() {
   local _outvar="$1"
   local key="$2"
   local default="$3"

   _value=$(git config --get git-release.$key 2> /dev/null || echo "$default")
   eval "$_outvar=\$_value"
}

#
main() {
   init
   cd_git_toplevel
   subcommand "$@"
}

#
subcommand() {
   case "$1" in
      set-version)
         shift
         subcommand_set_version "$@"
         ;;
      branch)
         shift
         subcommand_branch "$@"
         ;;
      tag)
         shift
         subcommand_tag "$@"
         ;;
      -h | --help)
         usage
         exit 0
         ;;
      *)
         echo "error: unknown subcommand: '$1'"
         usage
         exit 1
         ;;
   esac
}

# on master set new version, e.g. use to bump major version
subcommand_set_version() {
   local subcommand="set-version"
   local next_version="$1"

   assert_master_branch
   assert_git_clean_work_tree

   set_curr_version $next_version

   if [[ -n $next_version ]]
   then
      assert_valid_version $next_version
      NEXT_VERSION=$next_version
   else
      set_next_version $subcommand
      ask_next_version NEXT_VERSION $subcommand
   fi

   # on master
   update_version $NEXT_VERSION $MASTER_VERSION_POSTFIX
   git add $GIT_RELEASE_PROPERTIES
   git add -u
   git commit -q -m "${NEXT_VERSION}${MASTER_VERSION_POSTFIX}" || true

   subcommand_set_version_status
}

# from master create a new 'release/major.minor' branch and bump version to 'major.(minor+1).0' on master
subcommand_branch() {
   local subcommand="branch"

   assert_master_branch
   assert_git_clean_work_tree

   set_curr_version
   set_next_version $subcommand

   # on 'release/major.minor'
   git checkout -q -b ${RELEASE_BRANCH_PREFIX}${NEXT_BRANCH}
   update_version $CURR_VERSION $RELEASE_VERSION_POSTFIX
   git add $GIT_RELEASE_PROPERTIES
   git add -u
   # if GIT_RELEASE_HOOK has not changed anything this may be empty
   git commit -q --allow-empty -m "${CURR_VERSION}${RELEASE_VERSION_POSTFIX}"

   # on master
   git checkout -q master
   update_version $NEXT_VERSION $MASTER_VERSION_POSTFIX
   git add $GIT_RELEASE_PROPERTIES
   git add -u
   git commit -q -m "${NEXT_VERSION}${MASTER_VERSION_POSTFIX}"

   subcommand_branch_status
}

# on 'release/major.minor' tag a new version and bump version to 'major.minor.(patch+1)'
subcommand_tag() {
   local subcommand="tag"

   local opts_spec="\
git release tag [-f] [-m <msg>]
--
m,message=msg tag message
f,force       replace the tag if exists"
   eval "$(echo "$opts_spec" | git rev-parse --parseopt -- "$@" || echo exit $?)"

   assert_release_branch
   assert_git_clean_work_tree

   set_curr_version
   set_next_version $subcommand

   # on 'release/major.minor'
   echo "Tagging branch with version: $CURR_VERSION"
   git tag "$@" $CURR_VERSION
   update_version $NEXT_VERSION $RELEASE_VERSION_POSTFIX
   git add $GIT_RELEASE_PROPERTIES
   git add -u
   git commit -q -m "${NEXT_VERSION}${RELEASE_VERSION_POSTFIX}"

   subcommand_tag_status
}

#
die() {
   echo "${0##*/}: $@ -- exit." >&2
   exit 1;
}

#
git_toplevel() {
   local _outvar="$1"
   local _toplevel=$(git rev-parse --show-toplevel 2> /dev/null)
   if [[ -z $_toplevel ]] || [[ ! -d $_toplevel ]]
   then
      die "git toplevel not found. Not a git repository (or any of the parent directories)"
   fi

   eval "$_outvar=\$_toplevel"
}

#
cd_git_toplevel() {
   local toplevel
   git_toplevel toplevel
   cd $toplevel
}

#
git_current_branch() {
   git symbolic-ref --short --quiet HEAD
}

#
on_master_branch() {
   [[ $(git_current_branch) == "master" ]]
}

#
assert_master_branch() {
   if ! on_master_branch
   then
      die "current branch must be master"
   fi
}

#
on_release_branch() {
   [[ $(git_current_branch) =~ $RELEASE_BRANCH_REGEXP ]]
}

#
assert_release_branch() {
   if ! on_release_branch
   then
      die "current branch must be 'release/major.minor'"
   fi
}

#
is_git_clean_work_tree () {
   git rev-parse --verify HEAD >/dev/null || return 1
   git update-index -q --ignore-submodules --refresh
   git diff-files --quiet --ignore-submodules || return 1
   git diff-index --cached --quiet --ignore-submodules HEAD -- || return 1
}

#
assert_git_clean_work_tree() {
   if ! is_git_clean_work_tree
   then
      die "found unstaged or uncommitted changes"
   fi
}

#
is_valid_version() {
   [[ $1 =~ $VERSION_REGEXP ]]
}

#
assert_valid_version() {
   local version="$1"

   if ! is_valid_version "$version"
   then
      die "not valid 'major.minor.patch' version format: '$version'"
   fi
}

#
set_curr_version() {
   local version="$1"

   assert_release_properties $version

   . $GIT_RELEASE_PROPERTIES
   assert_valid_version $version

   CURR_VERSION=$version
}

#
set_next_version() {
   local subcommand="$1"
   local split major minor patch

   split=(${CURR_VERSION//\./ })
   major=${split[0]}
   minor=${split[1]}
   patch=${split[2]}

   if [[ $subcommand == "branch" || $subcommand == set_version ]]
   then
      # e.g. 2.7
      NEXT_BRANCH="$major.$minor"

      # e.g. 2.7.0 -> 2.8.0
      NEXT_VERSION="$major.$((minor+1)).0"
   else
      # e.g. 2.7.3 -> 2.7.4
      NEXT_VERSION="$major.$minor.$((patch+1))"
   fi
}

#
function ask_next_version {
   local _outvar="$1"
   local subcommand="$2"
   local read_version _next_version

   read -e -p "Specify the next version of '$(git_current_branch)': [$NEXT_VERSION] ? " read_version
   _next_version=${read_version:-$NEXT_VERSION}

   assert_valid_version $_next_version

   eval "$_outvar=\$_next_version"
}

#
assert_release_properties() {
   local version init_version read_version
   local init_version="$1"

   if [[ ! -f $GIT_RELEASE_PROPERTIES ]]
   then
      if [[ -n $init_version ]]
      then
         version=$init_version
      else
         init_version=0.1.0
         read -e -p "$GIT_RELEASE_PROPERTIES file not found, create it with version [$init_version] ? " read_version
         version=${read_version:-$init_version}
      fi

      assert_valid_version $version
      update_release_properties $version
   fi
}

#
update_release_properties() {
   local version="$1"

   echo "Next version of '$(git_current_branch)' is now version: $version"
   printf "# git-release generated file\nversion=%s\n" $version > $GIT_RELEASE_PROPERTIES
}

#
update_version() {
   local version="$1"
   local postfix="$2"

   update_release_properties $version

   if [[ -x $GIT_RELEASE_HOOK ]]
   then
       $GIT_RELEASE_HOOK $version $postfix
   fi
}

maxlen() {
   local m
   for s; do
      ((m = m > ${#s} ? m : ${#s}))
   done
   echo $m
}

subcommand_set_version_status() {
   print_status\
      "${CURR_VERSION}${MASTER_VERSION_POSTFIX}"\
      "${NEXT_VERSION}${MASTER_VERSION_POSTFIX}"\
      - - -
}

subcommand_branch_status() {
   print_status\
      "${CURR_VERSION}${MASTER_VERSION_POSTFIX}"\
      "${NEXT_VERSION}${MASTER_VERSION_POSTFIX}"\
      "${RELEASE_BRANCH_PREFIX}${NEXT_BRANCH}"\
      -\
      "${CURR_VERSION}${RELEASE_VERSION_POSTFIX}"
}

subcommand_tag_status() {
   print_status\
      - -\
      $(git_current_branch)\
      "${CURR_VERSION}${RELEASE_VERSION_POSTFIX}"\
      "${NEXT_VERSION}${RELEASE_VERSION_POSTFIX}"
}

print_status() {
   local blen plen clen
   local master_curr_version="$1"
   local master_next_version="$2"

   local release_branch_name="$3"
   local release_curr_version="$4"
   local release_next_version="$5"


   blen=$(maxlen master $release_branch_name)
   plen=$(maxlen previous $master_curr_version $release_curr_version)
   clen=$(maxlen current $master_next_version $release_next_version)

   printf "\nstatus:\n"
   printf "%-"${blen}"s  %-"${plen}"s  %-"${clen}"s\n" ""                   previous              current
   printf "%-"${blen}"s  %-"${plen}"s  %-"${clen}"s\n" master               $master_curr_version  $master_next_version
   printf "%-"${blen}"s  %-"${plen}"s  %-"${clen}"s\n" $release_branch_name $release_curr_version $release_next_version
}


main "$@"

